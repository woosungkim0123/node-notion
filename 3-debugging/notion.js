/*
 디버깅: 코드에서 어디에서 문제가 생겼는지 예상하면서 문제가 되는 버그를 해결!
 가장 중요한 문제를 정의하는것!
 
 예상하는 원하는 문제나 목표를 정확하게 정의하고 지금 실제로 일어나고 있는 일은 무엇인지 현재 어떤 순서로
 어떻게 버그가 이슈가 발생하고 있는지 그 차이(갭)를 메꿔나가는 과정을 디버깅

 버그만 수정하는 것이 아닌 원하는 UI/UX, 원하는 비지니스 로직, 원하는 성능, 원하는 비용 것과 지금 발생하는 상황의 GAP을 줄여나가는 것이 제일 중요! 갭을 줄여나가는데있어서
 디버깅 뿐만 아니라 UNIT testing이나 integration testing을 작성하거나 control flow를 분석하거나 출력된 로그나 로깅 서비스를 이용하고 있다면 출력된 로그를 분석하면서
 어떤 일이 발생했는지 알 수 있고
 지금부터 배울 interactive 디버깅을 할 수 있다
 =>  동작하는 소스코드에서 실시간으로 값을 확인하고 변경해서 상태확인 가능

 이뿐만 아니라 성능을 분석하는데 유용한 메모리를 분석하고 여러가지 상태의 프로파일링을 할 수있는 존재
 
*/
