// 버퍼(buffer)와 스트림(stream)
/*
서버가 사용자에게 동영상 파일을 보내주고 사용자가 동영상 파일을 다 다운받을떄까지 기다렸다가
동영상을 보게되면 번거럽고 오랜시간이 걸림
이와는 반대로 서버에서 동영상 전체가 아닌 잘게잘게 나눠진 데이터를 조금조금씩 보내주는 것을 스트리밍(streaming)이라고 합니다
사용자가 전체동영상을 받지않아도 볼수 있음
이것을 progressive download

사용자가 보는속도보다 다운로드받는속도가 더 빠르면 버퍼링을 이용해서 조금조금씩 더 버퍼를 채워넣을 수 있음
다운로드 받는 속도가 보는 속도가 더 빠르면 충분히 쌓여있는 버퍼가 없기떄문에 버퍼링에 걸렸다. -> 멈췄다
이떄 사용하는게 버퍼와 스트림

트위치 실시간 생중계 서비스

이것도 비슷한 개념

사용자가 게임하는 장면을 실시간으로 녹화하면서 조금조금씩 데이터를 스트리밍하게되고 서버에서는 스트리밍된 데이터를(사용자에게 받은 데이터) 버퍼링을 햇다가 작은 단위 mp4파일을 실시간으로 보고있는 사용자에게
보내줌
아무 플레이어에서나 되는 것은 아니고 HLS PLAYER라는 기술을 이용하고 있는 플레이어에서만 작은 단위의 동영상 파일을 볼 수 있음

컴퓨터에서도 엄청 큰 사이즈 파일을 한번에 다읽는다면 그 파일에 데이터를 메모리에 가지고옴. 파일이 정말커서 메모리보다 크다면 당연히 안됨

이럴떄는 조금조금 단위의 데이터를 버퍼를 스트림해서 메모리로 가져오면 됨

버퍼와 스트림은 메모리가 효율적이고 시간도 효율적

서버에서 파일을 다 읽을떄까지 기다리는 것이 아닌 파일을 조금씩 읽으면서 사용자에게 보내줄수 있기 떄문

*/

// 파일을 읽을때 인코딩을 하지않으면 버퍼에 있는 내용을 그대로 보여준다

// go나 c, c++ 메모리관리 프로그래밍 언어를 해봤으면 버퍼에 익숙함

/*
버퍼라는 것은 메모리에서 고정된 사이즈의 메모리 덩어리
숫자의 배열 형태임

메모리에 들어있는 데이터 자체를 가르킴
그래서 byte of data (데이터에 있는 바이트 자체)

*/
// 하이 라는 문자열을 메모리에 올릴 때 어떤식으로 저장되는지 볼 수 있음
const buf = Buffer.from("Hi");

console.log(buf); // <Buffer 48 69>
console.log(buf.length); // 2
// 접근시 버퍼는 배열형태임
// 배열에 있는것을 접근시 아스키코드형태로 출력됨
console.log(buf[0]); // 72
console.log(buf[1]); // 105
// 대문자 H는 72 i는 105

// 친숙한 문자열형태로 바꾸고싶으면?
// 안에 들어가보기 위해 vscode에 노드다 라고 알려주기
const fs = require("fs");
console.log(buf.toString()); // toString에는 인코딩을 전달할 수 있음, 기본값은 utf8

// 나와있는 숫자는 유니코드 형태중 하나인데 H는 48, 소문자 i는 69번호로 나와있음

// 특정한 문자열에서 버퍼를 만들어도되고 직접 만들 수도 있읍

// allocation의 약자 사이즈가 두개인 버퍼를 만듬
// 이 함수를 이용하면 메모리에서 사용가능한 메모리 덩어리를 찾아서 그 덩어리를 초기화 시켜줌
const buf2 = Buffer.alloc(2);

// 초기화시켜주지 않는 api도 있음
// 기존의 다른 데이터가 들어있으나 사용되지 않는 메모리라면 공간을 확보하지만 초기화 하지않는 allocUnsafe
// 초기화하지않기 때문에 빠르나 하지만 데이터가 들어있을 수도 있음으로 초기화를 하는게 좋음
const buf3 = Buffer.allocUnsafe(2);

buf2[0] = 72;
buf2[1] = 105;

console.log(buf2.toString());
console.log(buf3); // 여유로운 메모리 공간이 많을땐 다 초기화 되있지만 많이 사용되고 있는 경우 다른 값이 출력될 수 있음

//buf2에 있는 내용을 buf3에 옮겨 오고 싶다면
buf2.copy(buf3);
console.log(buf2.toString());
console.log(buf3);

// 버퍼는 데이터를 로우 형태로(메모리에 있는 데이터 형태로, 바이트 단위로 ) 처리할 수 있게 해줌
// concat

// 여러가지 버퍼를 모을 수 있음
const newBuf = Buffer.concat([buf, buf2, buf3]);
console.log(newBuf);
